/* ~This file is part of the Aliro library~

Copyright (C) 2023 Epistasis Lab, 
Center for Artificial Intelligence Research and Education (CAIRE),
Department of Computational Biomedicine (CBM),
Cedars-Sinai Medical Center.

Aliro is maintained by:
    - Hyunjun Choi (hyunjun.choi@cshs.org)
    - Miguel Hernandez (miguel.e.hernandez@cshs.org)
    - Nick Matsumoto (nicholas.matsumoto@cshs.org)
    - Jay Moran (jay.moran@cshs.org)
    - and many other generous open source contributors

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <https://www.gnu.org/licenses/>.

(Autogenerated header, do not modify)

*/
import React from "react";
import configureStore from "redux-mock-store";
import thunk from "redux-thunk";
import { render, screen } from "@testing-library/react";
import { Provider } from "react-redux";
import FileUploadOrigin from "./FileUploadOrigin"; // Assuming your component path

const middlewares = [thunk];
const initialState = {};
const mockStore = configureStore(middlewares);

describe("basic testing of FileUploadOrigin react component", () => {
  let store;

  beforeEach(() => {
    store = mockStore(initialState);
  });

  it("renders the FileUploadOrigin component with testProp", () => {
    render(
      <Provider store={store}>
        <FileUploadOrigin testProp="hello" />
      </Provider>
    );

    // Test that the component renders and contains the expected text
    expect(screen.getByText(/hello/i)).toBeInTheDocument(); // Adjust if necessary
  });

  it("handles file uploads", () => {
    render(
      <Provider store={store}>
        <FileUploadOrigin testProp="hello" />
      </Provider>
    );

    const fileInput = screen.getByTestId("file-upload-input"); // Assuming there's a file input
    const badFakeFile = new File(["bad content"], "iris.txt", {
      type: "text/plain",
    });

    // Simulate file input change
    fireEvent.change(fileInput, { target: { files: [badFakeFile] } });

    // Now you can assert that the file has been "uploaded" or other side effects have occurred
    expect(screen.getByText("iris.txt")).toBeInTheDocument(); // Adjust according to your app's behavior
  });
});
